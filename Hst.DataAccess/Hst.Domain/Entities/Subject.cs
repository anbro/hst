//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;

namespace Hst.Domain.Entities
{
    [Serializable]
    public partial class Subject
    {
        #region Primitive Properties
    
        public virtual int Id
        {
            get;
            set;
        }
    
        public virtual string Name
        {
            get;
            set;
        }

        #endregion
        #region Navigation Properties
    
        public virtual ICollection<StateRequiredSubject> StateRequiredSubjects
        {
            get
            {
                if (_stateRequiredSubjects == null)
                {
                    var newCollection = new FixupCollection<StateRequiredSubject>();
                    newCollection.CollectionChanged += FixupStateRequiredSubjects;
                    _stateRequiredSubjects = newCollection;
                }
                return _stateRequiredSubjects;
            }
            set
            {
                if (!ReferenceEquals(_stateRequiredSubjects, value))
                {
                    var previousValue = _stateRequiredSubjects as FixupCollection<StateRequiredSubject>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupStateRequiredSubjects;
                    }
                    _stateRequiredSubjects = value;
                    var newValue = value as FixupCollection<StateRequiredSubject>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupStateRequiredSubjects;
                    }
                }
            }
        }
        private ICollection<StateRequiredSubject> _stateRequiredSubjects;
    
        public virtual ICollection<Lesson> Lessons
        {
            get
            {
                if (_lessons == null)
                {
                    var newCollection = new FixupCollection<Lesson>();
                    newCollection.CollectionChanged += FixupLessons;
                    _lessons = newCollection;
                }
                return _lessons;
            }
            set
            {
                if (!ReferenceEquals(_lessons, value))
                {
                    var previousValue = _lessons as FixupCollection<Lesson>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupLessons;
                    }
                    _lessons = value;
                    var newValue = value as FixupCollection<Lesson>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupLessons;
                    }
                }
            }
        }
        private ICollection<Lesson> _lessons;
    
        public virtual ICollection<Activity> Activities
        {
            get
            {
                if (_activities == null)
                {
                    var newCollection = new FixupCollection<Activity>();
                    newCollection.CollectionChanged += FixupActivities;
                    _activities = newCollection;
                }
                return _activities;
            }
            set
            {
                if (!ReferenceEquals(_activities, value))
                {
                    var previousValue = _activities as FixupCollection<Activity>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupActivities;
                    }
                    _activities = value;
                    var newValue = value as FixupCollection<Activity>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupActivities;
                    }
                }
            }
        }
        private ICollection<Activity> _activities;

        #endregion
        #region Association Fixup
    
        private void FixupStateRequiredSubjects(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (StateRequiredSubject item in e.NewItems)
                {
                    if (!item.Subjects.Contains(this))
                    {
                        item.Subjects.Add(this);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (StateRequiredSubject item in e.OldItems)
                {
                    if (item.Subjects.Contains(this))
                    {
                        item.Subjects.Remove(this);
                    }
                }
            }
        }
    
        private void FixupLessons(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (Lesson item in e.NewItems)
                {
                    if (!item.Subjects.Contains(this))
                    {
                        item.Subjects.Add(this);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (Lesson item in e.OldItems)
                {
                    if (item.Subjects.Contains(this))
                    {
                        item.Subjects.Remove(this);
                    }
                }
            }
        }
    
        private void FixupActivities(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (Activity item in e.NewItems)
                {
                    if (!item.Subjects.Contains(this))
                    {
                        item.Subjects.Add(this);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (Activity item in e.OldItems)
                {
                    if (item.Subjects.Contains(this))
                    {
                        item.Subjects.Remove(this);
                    }
                }
            }
        }

        #endregion
    }
}

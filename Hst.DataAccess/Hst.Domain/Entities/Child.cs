//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;

namespace Hst.Domain.Entities
{
    [Serializable]
    public partial class Child
    {
        #region Primitive Properties
    
        public virtual int Id
        {
            get;
            set;
        }
    
        public virtual string NameFirst
        {
            get;
            set;
        }
    
        public virtual string NameLast
        {
            get;
            set;
        }
    
        public virtual System.DateTime DateOfBirth
        {
            get;
            set;
        }
    
        public virtual int SchoolId
        {
            get { return _schoolId; }
            set
            {
                if (_schoolId != value)
                {
                    if (School != null && School.Id != value)
                    {
                        School = null;
                    }
                    _schoolId = value;
                }
            }
        }
        private int _schoolId;

        #endregion
        #region Navigation Properties
    
        public virtual ICollection<User> Users
        {
            get
            {
                if (_users == null)
                {
                    var newCollection = new FixupCollection<User>();
                    newCollection.CollectionChanged += FixupUsers;
                    _users = newCollection;
                }
                return _users;
            }
            set
            {
                if (!ReferenceEquals(_users, value))
                {
                    var previousValue = _users as FixupCollection<User>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupUsers;
                    }
                    _users = value;
                    var newValue = value as FixupCollection<User>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupUsers;
                    }
                }
            }
        }
        private ICollection<User> _users;
    
        public virtual ICollection<Lesson> Lessons
        {
            get
            {
                if (_lessons == null)
                {
                    var newCollection = new FixupCollection<Lesson>();
                    newCollection.CollectionChanged += FixupLessons;
                    _lessons = newCollection;
                }
                return _lessons;
            }
            set
            {
                if (!ReferenceEquals(_lessons, value))
                {
                    var previousValue = _lessons as FixupCollection<Lesson>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupLessons;
                    }
                    _lessons = value;
                    var newValue = value as FixupCollection<Lesson>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupLessons;
                    }
                }
            }
        }
        private ICollection<Lesson> _lessons;
    
        public virtual ICollection<Activity> Activities
        {
            get
            {
                if (_activities == null)
                {
                    var newCollection = new FixupCollection<Activity>();
                    newCollection.CollectionChanged += FixupActivities;
                    _activities = newCollection;
                }
                return _activities;
            }
            set
            {
                if (!ReferenceEquals(_activities, value))
                {
                    var previousValue = _activities as FixupCollection<Activity>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupActivities;
                    }
                    _activities = value;
                    var newValue = value as FixupCollection<Activity>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupActivities;
                    }
                }
            }
        }
        private ICollection<Activity> _activities;
    
        public virtual ICollection<TestResult> TestResults
        {
            get
            {
                if (_testResults == null)
                {
                    var newCollection = new FixupCollection<TestResult>();
                    newCollection.CollectionChanged += FixupTestResults;
                    _testResults = newCollection;
                }
                return _testResults;
            }
            set
            {
                if (!ReferenceEquals(_testResults, value))
                {
                    var previousValue = _testResults as FixupCollection<TestResult>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupTestResults;
                    }
                    _testResults = value;
                    var newValue = value as FixupCollection<TestResult>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupTestResults;
                    }
                }
            }
        }
        private ICollection<TestResult> _testResults;
    
        public virtual School School
        {
            get { return _school; }
            set
            {
                if (!ReferenceEquals(_school, value))
                {
                    var previousValue = _school;
                    _school = value;
                    FixupSchool(previousValue);
                }
            }
        }
        private School _school;

        #endregion
        #region Association Fixup
    
        private void FixupSchool(School previousValue)
        {
            if (previousValue != null && previousValue.Children.Contains(this))
            {
                previousValue.Children.Remove(this);
            }
    
            if (School != null)
            {
                if (!School.Children.Contains(this))
                {
                    School.Children.Add(this);
                }
                if (SchoolId != School.Id)
                {
                    SchoolId = School.Id;
                }
            }
        }
    
        private void FixupUsers(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (User item in e.NewItems)
                {
                    if (!item.Children.Contains(this))
                    {
                        item.Children.Add(this);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (User item in e.OldItems)
                {
                    if (item.Children.Contains(this))
                    {
                        item.Children.Remove(this);
                    }
                }
            }
        }
    
        private void FixupLessons(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (Lesson item in e.NewItems)
                {
                    if (!item.Children.Contains(this))
                    {
                        item.Children.Add(this);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (Lesson item in e.OldItems)
                {
                    if (item.Children.Contains(this))
                    {
                        item.Children.Remove(this);
                    }
                }
            }
        }
    
        private void FixupActivities(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (Activity item in e.NewItems)
                {
                    if (!item.Children.Contains(this))
                    {
                        item.Children.Add(this);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (Activity item in e.OldItems)
                {
                    if (item.Children.Contains(this))
                    {
                        item.Children.Remove(this);
                    }
                }
            }
        }
    
        private void FixupTestResults(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (TestResult item in e.NewItems)
                {
                    if (!item.Children.Contains(this))
                    {
                        item.Children.Add(this);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (TestResult item in e.OldItems)
                {
                    if (item.Children.Contains(this))
                    {
                        item.Children.Remove(this);
                    }
                }
            }
        }

        #endregion
    }
}
